name: Deploy to Amazon EC2

on:
  push:
    branches: [ "master" ]

env:
  AWS_REGION: us-east-1             # set this to your preferred AWS region, e.g. us-west-1

permissions:
  contents: read

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: production

    steps:
    - name: Checkout
      uses: actions/checkout@v3
      
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Copy SSH private key to EC2
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa

    # Add the following step to run the bash script
    - name: Run the SSH Key Copy Script
      run: |
        # Replace YOUR_PUBLIC_KEY_PATH, YOUR_PRIVATE_KEY_PATH, YOUR_USERNAME, and YOUR_EC2_INSTANCE_IP with actual values
        PUBLIC_KEY_PATH="~/.ssh/id_rsa.pub"
        PRIVATE_KEY_PATH="~/.ssh/id_rsa"
        
        # Read the contents of the public key file
        PUBLIC_KEY_CONTENT=$(cat "$PUBLIC_KEY_PATH")
        
        # Use ssh to copy the public key to the EC2 instance's authorized_keys file
        ssh -i "$PRIVATE_KEY_PATH" -o "StrictHostKeyChecking=no"  ${{ secrets.SSH_USERNAME }}@${{ secrets.IP_ADDRESS }} "echo '$PUBLIC_KEY_CONTENT' >> ~/.ssh/authorized_keys"

    # Verify SSH connectivity to the EC2 instance
    - name: Verify SSH connectivity
      run: |
        ssh -o "StrictHostKeyChecking=no" ${{ secrets.SSH_USERNAME }}@${{ secrets.IP_ADDRESS }} exit

    - name: Check if there are any running containers
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.IP_ADDRESS }}
        username: ${{ secrets.SSH_USERNAME }}
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        script: |
          EC2_PUBLIC_IP=${{ secrets.IP_ADDRESS }}

          # SSH command to check if there are any containers running
          containers_running=$(ssh -o "StrictHostKeyChecking=no" ubuntu@$EC2_PUBLIC_IP 'docker ps -q')
          
          if [ -n "$containers_running" ]; then
            # If there are running containers, stop and remove them
            ssh -o "StrictHostKeyChecking=no" ubuntu@$EC2_PUBLIC_IP 'docker stop $(docker ps -q) && docker rm $(docker ps -aq)'
          else
            echo "No running containers found on the remote EC2 instance."
          fi

    # Pull the latest Docker image
    - name: Pull Docker image
      run: |
        ssh -o "StrictHostKeyChecking=no" ${{ secrets.SSH_USERNAME }}@${{ secrets.IP_ADDRESS }} 'docker pull hiadithere/youtube-sentiment-analysis:0.0.7.RELEASE'

    # Run the docker image
    - name: Run Docker image
      run: |
        ssh -o "StrictHostKeyChecking=no" ${{ secrets.SSH_USERNAME }}@${{ secrets.IP_ADDRESS }} 'docker run -d --memory=2g -p 3000:3000 -e AWS_ACCESS_KEY_ID="${{ secrets.AWS_ACCESS_KEY_ID }}" -e AWS_SECRET_ACCESS_KEY="${{ secrets.AWS_SECRET_ACCESS_KEY }}" -e AWS_DEFAULT_REGION="${{ env.AWS_REGION }}" hiadithere/youtube-sentiment-analysis:0.0.7.RELEASE'

    # Verify if the Docker container is running
    - name: Check Docker container status
      run: |
        ssh -o "StrictHostKeyChecking=no" ${{ secrets.SSH_USERNAME }}@${{ secrets.IP_ADDRESS }} 'docker ps -a'